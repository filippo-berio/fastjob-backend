# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    _instanceof:
        App\CQRS\QueryHandlerInterface:
            tags: ['cqrs.query_handler']
        App\CQRS\CommandHandlerInterface:
            tags: ['cqrs.command_handler']
        App\Core\Service\Task\TaskStack\Generator\TaskStackGeneratorInterface:
            tags: ['task_stack_generator']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude: '../src/*/Entity/'

    App\Authistic\Adapter\AuthisticClient:
        $host: '%env(AUTHISTIC_URL)%'
        $key: '%env(AUTHISTIC_API_KEY)%'

    App\CQRS\Bus\CommandBus:
        $commandHandlers: !tagged_iterator 'cqrs.command_handler'

    App\CQRS\Bus\QueryBus:
        $queryHandlers: !tagged_iterator 'cqrs.query_handler'

    App\DataFixtures\Purger\PurgerFactory:
        tags:
            - { name: 'doctrine.fixtures.purger_factory', alias: 'my_purger' }

    App\Core\Service\Task\TaskStack\Generator\TaskStackGeneratorFactory:
        $generators: !tagged_iterator 'task_stack_generator'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

when@test:
    services:
        _defaults:
            public: true
