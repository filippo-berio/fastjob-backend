# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $redisHost: '%env(REDIS_HOST)%'
            $storageEndpoint: '%env(STORAGE_ENDPOINT)%'
            $taskStackLimit: '%env(NEXT_TASK_STACK_LIMIT)%'

    _instanceof:
        App\Core\Domain\Service\Executor\NextExecutorService\NextExecutorServiceInterface:
            tags: ['core.next_executor_service']
        App\Core\Domain\Event\EventHandlerInterface:
            tags: ['core.event_handler']

        App\Lib\CQRS\QueryHandlerInterface:
            tags: ['cqrs.query_handler']
        App\Lib\CQRS\CommandHandlerInterface:
            tags: ['cqrs.command_handler']

        App\Lib\Sms\Service\Provider\SmsProviderInterface:
            tags: ['sms.provider']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/*/Entity/'
            - '../src/DataFixtures/*/Stubs/'

    App\Api\EventListener\ExceptionListener:
        tags:
            - {name: kernel.event_listener, event: kernel.exception}


    App\Auth\Repository\AccessTokenRepository:
        $accessTokenLifeTime: '%env(ACCESS_TOKEN_LIFETIME)%'

    App\Auth\Repository\BannedPhoneRepository:
        $phoneBanTime: '%env(BAN_PHONE_TIME)%'

    App\Auth\Repository\ConfirmationTokenRepository:
        $confirmationTokenLifeTime: '%env(CONFIRMATION_TOKEN_LIFETIME)%'

    App\Auth\Repository\ConfirmationTimeoutRepository:
        $timeout: '%env(CONFIRM_SMS_TIMEOUT)%'


    App\Core\Infrastructure\Repository\TaskOfferRepository:
        $taskOfferLifetime: '%env(TASK_OFFER_LIFETIME)%'

    App\Core\Infrastructure\Event\EventHandlerFactory:
        $handlers: !tagged_iterator 'core.event_handler'

    App\Core\Domain\Service\Executor\NextExecutorService\NextExecutorServiceFactory:
        $services: !tagged_iterator 'core.next_executor_service'

    App\Core\Domain\Service\Task\NextTask\GetProfileNextTaskService:
        $minimalStack: '%env(NEXT_TASK_MINIMAL_STACK)%'


    App\Lib\CQRS\MessageHandler\AsyncCommandMessageHandler:
        $commandHandlers: !tagged_iterator 'cqrs.command_handler'

    App\Lib\CQRS\MessageHandler\CommandMessageHandler:
        $commandHandlers: !tagged_iterator 'cqrs.command_handler'

    App\Lib\CQRS\MessageHandler\QueryMessageHandler:
        $queryHandlers: !tagged_iterator 'cqrs.query_handler'


    App\DataFixtures\Purger\PurgerFactory:
        tags:
            - { name: 'doctrine.fixtures.purger_factory', alias: 'my_purger' }


    App\Lib\Sms\Service\Provider\SmsProviderFactory:
        $provider: '%env(SMS_PROVIDER)%'
        $providers: !tagged_iterator 'sms.provider'

    App\Lib\Sms\Service\Provider\TelegramSmsProvider:
        $botToken: '%env(TELEGRAM_BOT_TOKEN)%'
        $host: '%env(TELEGRAM_BOT_URL)%'
        $chatId: '%env(TELEGRAM_CHAT_ID)%'

when@test:
    services:
        _defaults:
            public: true
